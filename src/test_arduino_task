//#define CONFIG_AUTOSTART_ARDUINO 0
//sdkconfig.h

#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"

#include <Arduino.h>

// 日志标签（ESP-IDF 风格）
static const char* TAG = "APP";

// ---------------------------------------------------------
// 配置参数：
// ---------------------------------------------------------
#define ARDUINO_TASK_STACK_SIZE 4096    // 分配给 Arduino 任务的栈大小（字节）
#define ARDUINO_TASK_PRIORITY    5       // Arduino 任务优先级

// ---------------------------------------------------------
// 静态分配内存：用于创建 Arduino 任务
// ---------------------------------------------------------
static StaticTask_t arduinoTaskTCB;
static StackType_t arduinoTaskStack[ARDUINO_TASK_STACK_SIZE];

// ---------------------------------------------------------
// Arduino 任务函数
// 此任务调用 Arduino 函数（如 Serial.println 和 delay），
// 打印“现在是 arduino”，延时 5 秒后进入无限循环，等待主任务删除。
// ---------------------------------------------------------
void arduinoTask(void *pvParameters) {
    Serial.println("现在是 arduino");
    delay(5000);  // 使用 Arduino 的延时函数，大约延时 5 秒

    // 任务完成主要动作后进入无限循环等待删除
    while (true) {
        vTaskDelay(10 / portTICK_PERIOD_MS);
    }
}

// ---------------------------------------------------------
// ESP-IDF 主入口函数
// 1. 调用 initArduino() 初始化 Arduino 环境；
// 2. 在循环中，静态创建 Arduino 任务，等待一定时间后删除，再延时后循环。
// ---------------------------------------------------------
extern "C" void app_main(void) {
    // 初始化 Arduino 环境
    initArduino();

    // 初始化 Serial（如未在 initArduino() 内部自动初始化）
    Serial.begin(115200);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    ESP_LOGI(TAG, "ESP-IDF app_main 启动");

    while (true) {
        // 创建 Arduino 任务（静态内存分配）
        TaskHandle_t arduinoTaskHandle = xTaskCreateStatic(
            arduinoTask,                 // 任务入口函数
            "arduinoTask",               // 任务名称
            ARDUINO_TASK_STACK_SIZE,     // 栈大小（字节）
            NULL,                        // 任务参数（此处未使用）
            ARDUINO_TASK_PRIORITY,       // 任务优先级
            arduinoTaskStack,            // 静态分配的栈内存
            &arduinoTaskTCB              // 静态分配的任务控制块
        );
        ESP_LOGI(TAG, "Arduino 任务创建成功");

        // 等待 6 秒（确保 Arduino 任务内的 5 秒延时已完成）
        vTaskDelay(6000 / portTICK_PERIOD_MS);

        // 删除 Arduino 任务
        vTaskDelete(arduinoTaskHandle);
        ESP_LOGI(TAG, "Arduino 任务已删除");

        // 等待 5 秒后重新创建任务，形成周期性循环
        vTaskDelay(5000 / portTICK_PERIOD_MS);
    }
}
