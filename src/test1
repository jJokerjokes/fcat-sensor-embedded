#include "driver/gpio.h"
#include "driver/pcnt.h"
#include "esp_timer.h"
#include "esp_sleep.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include <Arduino.h>
#include <stdio.h>
#include <cstdint>

// 配置宏
#define USE_ESP_IDF_MAIN    1  // 强制使用 ESP-IDF 主控制流
#define ARDUINO_CORE        1  // Arduino 任务运行在 APP_CPU (核心1)

// 电源控制
#define POWER_RAIL_GPIO GPIO_NUM_26
#define POWER_STABLE_DELAY_US 10000

// 脉冲计数器配置
#define MOISTURE_PCNT_UNIT PCNT_UNIT_0
#define MOISTURE_PCNT_H_LIM INT16_MAX
#define MOISTURE_PCNT_L_LIM INT16_MIN

// 测量参数
#define MAX_MEASUREMENTS 5
#define SOIL_PULSE_COUNT_DELAY_MS 500
#define SOIL_PULSE_COUNT_DELAY_US (SOIL_PULSE_COUNT_DELAY_MS * 1000)

// 状态机
enum AppState { WAITING, SENSING, SENDING };
RTC_DATA_ATTR AppState state = WAITING;

// 数据结构
#pragma pack(push, 1)
struct Measurement {
    uint32_t timestamp;
    uint16_t moisture_percent;
    float temperature;
    float humidity;
};
#pragma pack(pop)

RTC_DATA_ATTR Measurement measurements[MAX_MEASUREMENTS];
RTC_DATA_ATTR uint8_t measurement_count = 0;

static Measurement m;

// 硬件初始化
void hardware_init() {
    // GPIO 配置
    gpio_config_t power_conf = {
        .pin_bit_mask = (1ULL << POWER_RAIL_GPIO),
        .mode = GPIO_MODE_OUTPUT,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .intr_type = GPIO_INTR_DISABLE
    };
    gpio_config(&power_conf);

    // PCNT 配置
    pcnt_config_t pcnt_config;
    pcnt_config.pulse_gpio_num = GPIO_NUM_6;
    pcnt_config.ctrl_gpio_num = -1;
    pcnt_config.pos_mode = PCNT_COUNT_INC;
    pcnt_config.neg_mode = PCNT_COUNT_DIS;
    pcnt_config.lctrl_mode = PCNT_MODE_KEEP;
    pcnt_config.hctrl_mode = PCNT_MODE_KEEP;
    pcnt_config.counter_h_lim = MOISTURE_PCNT_H_LIM;
    pcnt_config.counter_l_lim = MOISTURE_PCNT_L_LIM;
    pcnt_config.unit = MOISTURE_PCNT_UNIT;
    pcnt_config.channel = PCNT_CHANNEL_0;
    pcnt_unit_config(&pcnt_config);
    pcnt_filter_enable(MOISTURE_PCNT_UNIT);
}

// Arduino 依赖隔离任务
void arduino_sensor_task(void* pvParams) {
    // 电源控制
    gpio_set_level(POWER_RAIL_GPIO, 1);
    const int64_t power_stable_end = esp_timer_get_time() + POWER_STABLE_DELAY_US;
    while (esp_timer_get_time() < power_stable_end) {}

    // 读取土壤湿度
    pcnt_counter_clear(MOISTURE_PCNT_UNIT);
    pcnt_counter_resume(MOISTURE_PCNT_UNIT);
    const int64_t measure_end = esp_timer_get_time() + SOIL_PULSE_COUNT_DELAY_US;
    while (esp_timer_get_time() < measure_end) {}
    pcnt_get_counter_value(MOISTURE_PCNT_UNIT, (int16_t*)&m.moisture_percent);
    pcnt_counter_pause(MOISTURE_PCNT_UNIT);

    // 模拟温度和湿度数据（硬件集成后应替换为实际测量值）
    m.temperature = 25.0f;  // 示例温度值
    m.humidity = 50.0f;     // 示例湿度值

    // 时间戳
    m.timestamp = esp_timer_get_time() / 1000;

    // 关闭电源
    gpio_set_level(POWER_RAIL_GPIO, 0);

    // 通知主任务
    xTaskNotifyGive((TaskHandle_t)pvParams);
    vTaskDelete(NULL);
}

// ESP-IDF 主控制流
void app_main() {
    hardware_init();

    while (1) {
        switch (state) {
            case SENSING: {
                TaskHandle_t main_task = xTaskGetCurrentTaskHandle();

                // 创建传感器任务
                xTaskCreatePinnedToCore(
                    arduino_sensor_task,
                    "arduino_sensor",
                    4096,
                    main_task,
                    configMAX_PRIORITIES - 2,
                    NULL,
                    ARDUINO_CORE
                );

                // 等待任务完成
                ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(2000));

                if (measurement_count < MAX_MEASUREMENTS) {
                    measurements[measurement_count++] = m;
                    state = SENDING;
                }
                break;
            }

            case SENDING:
                // 模拟发送逻辑（此处可添加无线发送代码）
                printf("Sending data...\n");
                for (int i = 0; i < measurement_count; i++) {
                    printf("Measurement %d: Moisture: %d%%, Temperature: %.2fC, Humidity: %.2f%%\n",
                           i + 1, measurements[i].moisture_percent, measurements[i].temperature, measurements[i].humidity);
                }
                measurement_count = 0;
                state = WAITING;
                break;

            case WAITING:
                // 低功耗等待
                esp_sleep_enable_timer_wakeup(10 * 1000000);
                esp_light_sleep_start();
                state = SENSING;
                break;
        }
    }
}

// Arduino 框架兼容层
#if CONFIG_AUTOSTART_ARDUINO
void setup() {
    // Arduino 初始化
    Serial.begin(115200);
    hardware_init();
}

void loop() {
    // 空实现，由 ESP-IDF 主循环接管
    vTaskDelete(NULL); // 删除默认 Arduino 任务
}
#endif
